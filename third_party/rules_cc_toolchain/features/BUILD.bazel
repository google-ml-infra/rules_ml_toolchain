# MIT License
#
# Copyright (c) 2021 silvergasp
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

load(
    ":features.bzl",
    "cc_feature",
    "cc_toolchain_import_feature",
    "cc_toolchain_sysroot_feature",
)

package(
    default_visibility = [
        "//cc:__pkg__",
        "//cc/impls/cpu:__pkg__",
        "//cc/impls/cuda:__pkg__",
    ],
)

cc_toolchain_import_feature(
    name = "startup_libs_ma64",
    enabled = True,
    toolchain_import = "//cc:startup_libs_ma64",
)

# Example, how to set ENV variables
#cc_feature(
#    name = "env_vars",
#    enabled = True,
#    env_sets = {
#        "KEY1": "VALUE1",
#        "KEY2": "VALUE2",
#    },
#)

# Reduces binary size by putting each block of data and function in their own
# sections, the linker can then garbage collect, discarding unused functions
# and other dead code.
cc_feature(
    name = "garbage_collect_symbols",
    compiler_flags = [
        "-ffunction-sections",
        "-fdata-sections",
    ],
    enabled = True,
    linker_flags = ["-Wl,--gc-sections"],  # macOS: ld64.lld: error: unknown argument '--gc-sections'
)

cc_feature(
    name = "warnings",
    compiler_flags = [
        "-Wall",
        "-fcolor-diagnostics",
        #"-Wpedantic",
    ],
    enabled = True,
)

cc_feature(
    name = "errors",
    compiler_flags = ["-Werror"],
)

# Override time macros to ensure reproducible builds.
cc_feature(
    name = "reproducible",
    compiler_flags = [
        "-no-canonical-prefixes",
        "-Wno-builtin-macro-redefined",
        "-D__DATE__=\"redacted\"",
        "-D__TIMESTAMP__=\"redacted\"",
        "-D__TIME__=\"redacted\"",
    ],
    enabled = True,
)

cc_feature(
    name = "language",
    c_flags = [
        "-xc",
    ],
    cc_flags = [
        "-xc++",
    ],
    enabled = True,
)

# Hermetic includes.
cc_feature(
    name = "hermetic_libraries",
    cc_flags = ["-nostdinc++"],
    compiler_flags = ["-nostdinc"],
    enabled = True,
    linker_flags = [
        "-nostdlib",
        "-nodefaultlibs",
    ],
)

# Instruments the executable to emit code coverage information.
cc_feature(
    name = "coverage",
    compiler_flags = [
        "--coverage",
    ],
    linker_flags = [
        "--coverage",
    ],
)

# Compilation modes.
cc_feature(
    name = "opt",
    compiler_flags = [
        "-O2",
    ],
    provides = ["compilation_mode"],
)

cc_feature(
    name = "dbg",
    compiler_flags = [
        "-g0",
    ],
    enabled = True,
)

cc_feature(
    name = "use_lld",
    enabled = True,
    linker_flags = [
        "-fuse-ld=lld",
    ],
)

cc_feature(
    name = "supports_pic",
    enabled = False,
)

cc_feature(
    name = "position_independent_code",
    compiler_flags = [
        "-fPIC",
    ],
    enabled = True,
    expand_if_available = "pic",
    implies = [
        ":supports_pic",
    ],
)

cc_feature(
    name = "position_independent_executable",
    compiler_flags = [
        "-fPIE",
    ],
    enabled = True,
    expand_if_not_available = "pic",
    implies = [
        ":supports_pic",
    ],
)

# Undefined symbols for macOS (pybind modules)
# TODO: Add only to libraries (now adds for all)
cc_feature(
    name = "undefined_symbols",
    enabled = True,
    linker_flags = [
        "-Wl,-undefined,dynamic_lookup",
    ],
)

# Language features.
CC_VERSIONS = [
    "c++11",
    "c++14",
    "c++17",
    "c++20",
]

[cc_feature(
    name = cc_version,
    cc_flags = [
        "-std=" + cc_version,
    ],
    provides = ["cc_standard"],
) for cc_version in CC_VERSIONS]

C_VERSIONS = [
    "c89",
    "c90",
    "c95",
    "c99",
    "c11",
]

[cc_feature(
    name = c_version,
    cc_flags = [
        "-std=" + c_version,
    ],
    provides = ["c_standard"],
) for c_version in C_VERSIONS]
