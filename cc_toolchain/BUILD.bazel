# Copyright 2025 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ==============================================================================

load("@local_config_cuda//cuda:build_defs.bzl", "if_cuda", "if_cuda_hermetic_clang")
load("@rules_cc//cc:defs.bzl", "cc_toolchain")
load("//third_party/rules_cc_toolchain:toolchain_config.bzl", "cc_toolchain_config")
load("//third_party/rules_cc_toolchain/features:cc_toolchain_import.bzl", "cc_toolchain_import")

#=====================================================================
# Tools: Linux x86_64, Sysroot: Linux x86_64
#=====================================================================

alias(
    name = "startup_libs_lx64",
    actual = "@sysroot_linux_x86_64//:startup_libs",
    visibility = ["//visibility:public"],
)

# buildifier: leave-alone
cc_toolchain_import(
    name = "imports_lx64_lx64",
    deps = [
        "@sysroot_linux_x86_64//:includes_c",
        "@llvm_linux_x86_64//:includes",
        "@sysroot_linux_x86_64//:includes_system",
        "@sysroot_linux_x86_64//:glibc",
        "@sysroot_linux_x86_64//:pthread",
        #"@llvm_linux_x86_64//:libclang_rt",
    ],
    visibility = ["//visibility:public"],
)

# buildifier: leave-alone
filegroup(
    name = "all_lx64_lx64",
    srcs = [
        ":imports_lx64_lx64",
        "//cc_toolchain/wrappers:all",
        "//cc_toolchain/features:startup_libs_lx64",
        "@llvm_linux_x86_64//:all",
    ],
)

# buildifier: leave-alone
filegroup(
    name = "compiler_lx64_lx64",
    srcs = [
        ":imports_lx64_lx64",
        "//cc_toolchain/wrappers:all",
        "@llvm_linux_x86_64//:clang",
        "@llvm_linux_x86_64//:clang++",
        "@llvm_linux_x86_64//:distro_libs",
    ],
)

# buildifier: leave-alone
filegroup(
    name = "linker_lx64_lx64",
    srcs = [
        ":compiler_lx64_lx64",
        "//cc_toolchain/wrappers:all",
        "@llvm_linux_x86_64//:ld",
        "@sysroot_linux_x86_64//:startup_libs",
        "@llvm_linux_x86_64//:distro_libs",
    ],
)

# buildifier: leave-alone
filegroup(
    name = "ar_lx64_lx64",
    srcs = [
        "//cc_toolchain/wrappers:all",
        "@llvm_linux_x86_64//:ar",
        "@llvm_linux_x86_64//:distro_libs",
    ],
)

cc_toolchain(
    name = "toolchain_lx64_lx64",
    all_files = ":all_lx64_lx64",
    ar_files = ":ar_lx64_lx64",
    compiler_files = ":compiler_lx64_lx64",
    dwp_files = ":all_lx64_lx64",
    linker_files = ":linker_lx64_lx64",
    objcopy_files = ":empty",
    strip_files = ":empty",
    supports_param_files = 1,
    toolchain_config = ":toolchain_config_lx64_lx64",
    toolchain_identifier = "toolchain_lx64_lx64_id",
)

cc_toolchain_config(
    name = "toolchain_config_lx64_lx64",
    archiver = "@llvm_linux_x86_64//:ar",
    c_compiler = "@llvm_linux_x86_64//:clang",
    cc_compiler = "@llvm_linux_x86_64//:clang++",
    compiler_features = [
        # Hermetic libraries feature required before import.
        "//third_party/rules_cc_toolchain/features:hermetic_libraries",
        "//cc_toolchain/features:toolchain_import_lx64_lx64",

        # Toolchain configuration
        "//third_party/rules_cc_toolchain/features:warnings",
        "//third_party/rules_cc_toolchain/features:errors",
        "//third_party/rules_cc_toolchain/features:reproducible",
        "//third_party/rules_cc_toolchain/features:language",
        "//third_party/rules_cc_toolchain/features:use_lld",
        "//cc_toolchain/features:sysroot_lx64",
        "//cc_toolchain/features:startup_libs_lx64",
        "//third_party/rules_cc_toolchain/features:coverage",

        # PIC / PIE flags
        "//third_party/rules_cc_toolchain/features:supports_pic",
        "//third_party/rules_cc_toolchain/features:position_independent_code",
        "//third_party/rules_cc_toolchain/features:position_independent_executable",

        # Optimization flags
        "//third_party/rules_cc_toolchain/features:garbage_collect_symbols",
        "//cc_toolchain/features:constants_merge",
        "//cc_toolchain/features:asserts_disable",
        "//third_party/rules_cc_toolchain/features:dbg",
        "//third_party/rules_cc_toolchain/features:opt",
        "//cc_toolchain/features:detect_issues",
        "//cc_toolchain/features:detect_issues_ext",

        # C++ standard configuration
        "//third_party/rules_cc_toolchain/features:c++11",
        "//third_party/rules_cc_toolchain/features:c++14",
        "//third_party/rules_cc_toolchain/features:c++17",

        #
        "//cc_toolchain/features:allow_shlib_undefined",
        "//cc_toolchain/features:supports_dynamic_linker",
        "//cc_toolchain/features:supports_start_end_lib_feature",
    ],
    linker = "@llvm_linux_x86_64//:ld",
    target_cpu = "x86_64",
    target_system_name = "local",
)

toolchain(
    name = "lx64_lx64",
    exec_compatible_with = [
        "@platforms//cpu:x86_64",
        "@platforms//os:linux",
    ],
    target_compatible_with = [
        "@platforms//cpu:x86_64",
        "@platforms//os:linux",
    ],
    target_settings = [
        "@local_config_cuda//:is_cuda_disabled",
        "//cc_toolchain/config:is_hermetic_cc_enabled",
    ],
    toolchain = ":toolchain_lx64_lx64",
    toolchain_type = "@bazel_tools//tools/cpp:toolchain_type",
)

#---------------------------------------------------------------------------------------
# Tools: Linux x86_64, Sysroot: Linux x86_64, CUDA
#---------------------------------------------------------------------------------------
filegroup(
    name = "cuda_nvcc_files",
    srcs = if_cuda([
        "@cuda_nvcc//:bin",
        "@cuda_nvcc//:nvvm",
    ]),
)

CUDA_TOOLS = if_cuda_hermetic_clang(
    {
        "gcc": "wrappers/linux/clang",
        "cpp": "wrappers/linux/clang++",
        "ld": "wrappers/linux/ld",
        "ar": "wrappers/linux/ar",
        "gcov": "wrappers/linux/idler",
        "llvm-cov": "wrappers/linux/idler",
        "nm": "wrappers/linux/idler",
        "objdump": "wrappers/linux/idler",
        "strip": "wrappers/linux/idler",
    },
    {
        "gcc": "cuda/wrappers/nvcc_wrapper",
        "cpp": "wrappers/linux/clang++",
        "ld": "wrappers/linux/ld",
        "ar": "wrappers/linux/ar",
        "gcov": "wrappers/linux/idler",
        "llvm-cov": "wrappers/linux/idler",
        "nm": "wrappers/linux/idler",
        "objdump": "wrappers/linux/idler",
        "strip": "wrappers/linux/idler",
    },
)

# buildifier: leave-alone
cc_toolchain_import(
    name = "imports_lx64_lx64_cuda",
    deps = [
        "@rules_ml_toolchain//cc_toolchain/cuda/clang:inject_cuda_runtime_wrapper",
        "@sysroot_linux_x86_64//:includes_c",
        "@llvm_linux_x86_64//:includes",
        "@sysroot_linux_x86_64//:includes_system",
        "@sysroot_linux_x86_64//:glibc",
        "@sysroot_linux_x86_64//:pthread",
        #"@llvm_linux_x86_64//:libclang_rt",
    ],
    visibility = ["//visibility:public"],
)

# buildifier: leave-alone
filegroup(
    name = "all_lx64_lx64_cuda",
    srcs = [
        ":cuda_nvcc_files",
        ":imports_lx64_lx64_cuda",
        "//cc_toolchain/wrappers:all",
        "//cc_toolchain/cuda/wrappers:all",
        "//cc_toolchain/features:startup_libs_lx64",
        "@llvm_linux_x86_64//:all",
    ],
)

# buildifier: leave-alone
filegroup(
    name = "compiler_lx64_lx64_cuda",
    srcs = [
        ":cuda_nvcc_files",
        ":imports_lx64_lx64_cuda",
        "//cc_toolchain/wrappers:all",
        "//cc_toolchain/cuda/wrappers:all",
        "@llvm_linux_x86_64//:clang",
        "@llvm_linux_x86_64//:clang++",
        "@llvm_linux_x86_64//:distro_libs",
    ],
)

# buildifier: leave-alone
filegroup(
    name = "linker_lx64_lx64_cuda",
    srcs = [
        ":compiler_lx64_lx64_cuda",
        ":cuda_nvcc_files",
        "//cc_toolchain/wrappers:all",
        "@llvm_linux_x86_64//:ld",
        "@sysroot_linux_x86_64//:startup_libs",
        "@llvm_linux_x86_64//:distro_libs",
    ],
)

# buildifier: leave-alone
filegroup(
    name = "ar_lx64_lx64_cuda",
    srcs = [
        ":cuda_nvcc_files",
        "//cc_toolchain/wrappers:all",
        "@llvm_linux_x86_64//:ar",
        "@llvm_linux_x86_64//:distro_libs",
    ],
)

cc_toolchain(
    name = "toolchain_lx64_lx64_cuda",
    all_files = ":all_lx64_lx64_cuda",
    ar_files = ":ar_lx64_lx64_cuda",
    compiler_files = ":compiler_lx64_lx64_cuda",
    dwp_files = ":all_lx64_lx64_cuda",
    linker_files = ":linker_lx64_lx64_cuda",
    objcopy_files = ":empty",
    strip_files = ":empty",
    supports_param_files = 1,
    toolchain_config = ":toolchain_config_lx64_lx64_cuda",
    toolchain_identifier = "toolchain_lx64_lx64_cuda_id",
)

cc_toolchain_config(
    name = "toolchain_config_lx64_lx64_cuda",
    archiver = "@llvm_linux_x86_64//:ar",
    c_compiler = "@llvm_linux_x86_64//:clang",
    cc_compiler = "@llvm_linux_x86_64//:clang++",
    compiler_features = [
        # Cuda features
        "//cc_toolchain/cuda/features:toolchain_import_lx64_lx64",
        "@cuda_nvcc//:feature",
        "//cc_toolchain/cuda/features:hermetic",

        # Hermetic libraries feature required before import.
        "//third_party/rules_cc_toolchain/features:hermetic_libraries",

        # Toolchain configuration
        "//third_party/rules_cc_toolchain/features:warnings",
        "//third_party/rules_cc_toolchain/features:errors",
        "//third_party/rules_cc_toolchain/features:reproducible",
        "//third_party/rules_cc_toolchain/features:use_lld",
        "//cc_toolchain/features:sysroot_lx64",
        "//cc_toolchain/features:startup_libs_lx64",
        "//third_party/rules_cc_toolchain/features:coverage",

        # PIC / PIE flags
        "//third_party/rules_cc_toolchain/features:supports_pic",
        "//third_party/rules_cc_toolchain/features:position_independent_code",
        "//third_party/rules_cc_toolchain/features:position_independent_executable",

        # Optimization flags
        "//third_party/rules_cc_toolchain/features:garbage_collect_symbols",
        "//cc_toolchain/features:constants_merge",
        "//cc_toolchain/features:asserts_disable",
        "//third_party/rules_cc_toolchain/features:dbg",
        "//third_party/rules_cc_toolchain/features:opt",
        "//cc_toolchain/features:detect_issues",
        #"//cc_toolchain/features:detect_issues_ext",   # Non-hermetic builds don't include these flags

        # C++ standard configuration
        "//third_party/rules_cc_toolchain/features:c++11",
        "//third_party/rules_cc_toolchain/features:c++14",
        "//third_party/rules_cc_toolchain/features:c++17",

        #
        "//cc_toolchain/features:allow_shlib_undefined",
        "//cc_toolchain/features:supports_dynamic_linker",
        "//cc_toolchain/features:supports_start_end_lib_feature",
    ],
    linker = "@llvm_linux_x86_64//:ld",
    target_cpu = "x86_64",
    target_system_name = "local",
    tool_paths = CUDA_TOOLS,
)

toolchain(
    name = "lx64_lx64_cuda",
    exec_compatible_with = [
        "@platforms//cpu:x86_64",
        "@platforms//os:linux",
    ],
    target_compatible_with = [
        "@platforms//cpu:x86_64",
        "@platforms//os:linux",
        #"//cc_toolchain/config:cuda_enabled",
    ],
    target_settings = [
        "@local_config_cuda//:is_cuda_enabled",
        "//cc_toolchain/config:is_hermetic_cc_enabled",
    ],
    toolchain = ":toolchain_lx64_lx64_cuda",
    toolchain_type = "@bazel_tools//tools/cpp:toolchain_type",
)

######################################################################
# Tools: Linux x86_64, Sysroot: Linux aarch64
######################################################################

alias(
    name = "startup_libs_la64",
    actual = "@sysroot_linux_aarch64//:startup_libs",
    visibility = ["//visibility:public"],
)

# buildifier: leave-alone
cc_toolchain_import(
    name = "imports_lx64_la64",
    deps = [
        "@sysroot_linux_aarch64//:includes_c",
        "@llvm_linux_x86_64//:includes",
        "@sysroot_linux_aarch64//:includes_system",
        "@sysroot_linux_aarch64//:glibc",
        "@sysroot_linux_aarch64//:pthread",
    ],
    visibility = ["//visibility:public"],
)

# buildifier: leave-alone
filegroup(
    name = "all_lx64_la64",
    srcs = [
        ":imports_lx64_la64",
        "//cc_toolchain/wrappers:all",
        "//cc_toolchain/features:startup_libs_la64",
        "@llvm_linux_x86_64//:all",
    ],
)

# buildifier: leave-alone
filegroup(
    name = "compiler_lx64_la64",
    srcs = [
        ":all_lx64_la64",
        "//cc_toolchain/wrappers:all",
        "@llvm_linux_x86_64//:clang",
        "@llvm_linux_x86_64//:clang++",
        "@llvm_linux_x86_64//:distro_libs",
    ],
)

# buildifier: leave-alone
filegroup(
    name = "linker_lx64_la64",
    srcs = [
        ":compiler_lx64_la64",
        "//cc_toolchain/wrappers:all",
        "@llvm_linux_x86_64//:ld",
        "@sysroot_linux_aarch64//:startup_libs",
        "@llvm_linux_x86_64//:distro_libs",
    ],
)

# buildifier: leave-alone
filegroup(
    name = "ar_lx64_la64",
    srcs = [
        "//cc_toolchain/wrappers:all",
        "@llvm_linux_x86_64//:ar",
        "@llvm_linux_x86_64//:distro_libs",
    ],
)

cc_toolchain(
    name = "toolchain_lx64_la64",
    all_files = ":all_lx64_la64",
    ar_files = ":ar_lx64_la64",
    compiler_files = ":compiler_lx64_la64",
    dwp_files = ":all_lx64_la64",
    linker_files = ":linker_lx64_la64",
    objcopy_files = ":empty",
    strip_files = ":empty",
    supports_param_files = 1,
    toolchain_config = ":toolchain_config_lx64_la64",
    toolchain_identifier = "toolchain_id_lx64_la64",
)

cc_toolchain_config(
    name = "toolchain_config_lx64_la64",
    archiver = "@llvm_linux_x86_64//:ar",
    c_compiler = "@llvm_linux_x86_64//:clang",
    cc_compiler = "@llvm_linux_x86_64//:clang++",
    compiler_features = [
        # Hermetic libraries feature required before import.
        "//third_party/rules_cc_toolchain/features:hermetic_libraries",
        "//cc_toolchain/features:toolchain_import_lx64_la64",

        # Toolchain configuration
        "//third_party/rules_cc_toolchain/features:warnings",
        "//third_party/rules_cc_toolchain/features:errors",
        "//third_party/rules_cc_toolchain/features:reproducible",
        "//third_party/rules_cc_toolchain/features:language",
        "//third_party/rules_cc_toolchain/features:use_lld",
        "//cc_toolchain/features:sysroot_la64",
        "//cc_toolchain/features:startup_libs_la64",
        "//third_party/rules_cc_toolchain/features:coverage",

        # PIC / PIE flags
        "//third_party/rules_cc_toolchain/features:supports_pic",
        "//third_party/rules_cc_toolchain/features:position_independent_code",
        "//third_party/rules_cc_toolchain/features:position_independent_executable",

        # Optimization flags
        "//third_party/rules_cc_toolchain/features:garbage_collect_symbols",
        "//cc_toolchain/features:constants_merge",
        "//cc_toolchain/features:asserts_disable",
        "//third_party/rules_cc_toolchain/features:dbg",
        "//third_party/rules_cc_toolchain/features:opt",
        "//cc_toolchain/features:detect_issues",
        "//cc_toolchain/features:detect_issues_ext",

        # C++ standard configuration
        "//third_party/rules_cc_toolchain/features:c++11",
        "//third_party/rules_cc_toolchain/features:c++14",
        "//third_party/rules_cc_toolchain/features:c++17",

        #
        "//cc_toolchain/features:allow_shlib_undefined",
        "//cc_toolchain/features:supports_dynamic_linker",
        "//cc_toolchain/features:supports_start_end_lib_feature",
    ],
    linker = "@llvm_linux_x86_64//:ld",
    target_cpu = "aarch64",
    target_system_name = "local",
)

# buildifier: leave-alone
toolchain(
    name = "lx64_la64",
    exec_compatible_with = [
        "@platforms//cpu:x86_64",
        "@platforms//os:linux",
    ],
    target_compatible_with = [
        "@platforms//cpu:aarch64",
        "@platforms//os:linux",
    ],
    target_settings = [
        "@local_config_cuda//:is_cuda_disabled",
        "//cc_toolchain/config:is_hermetic_cc_enabled",
    ],
    toolchain = ":toolchain_lx64_la64",
    toolchain_type = "@bazel_tools//tools/cpp:toolchain_type",
)

######################################################################
# Tools: Linux x86_64, Sysroot: macOS aarch64
######################################################################

MAC_TOOLS = {
    "gcc": "wrappers/darwin/clang",
    "cpp": "wrappers/darwin/clang++",
    "ld": "wrappers/darwin/ld",
    "ar": "wrappers/darwin/ar",
    "gcov": "wrappers/darwin/idler",
    "llvm-cov": "wrappers/darwin/idler",
    "nm": "wrappers/darwin/idler",
    "objdump": "wrappers/darwin/idler",
    "strip": "wrappers/darwin/idler",
}

alias(
    name = "startup_libs_ma64",
    actual = "@sysroot_macos_aarch64//:startup_libs",
    visibility = ["//visibility:public"],
)

# buildifier: leave-alone
cc_toolchain_import(
    name = "imports_lx64_ma64",
    deps = [
        "@sysroot_macos_aarch64//:includes_c",
        "@llvm_linux_x86_64//:includes",
        "@sysroot_macos_aarch64//:includes_system",
        "@sysroot_macos_aarch64//:glibc",
        "@sysroot_macos_aarch64//:pthread",
    ],
    visibility = ["//visibility:public"],
)

# buildifier: leave-alone
filegroup(
    name = "all_lx64_ma64",
    srcs = [
        ":imports_lx64_ma64",
        "//cc_toolchain/wrappers:all",
        "//cc_toolchain/features:startup_libs_ma64",
        "@llvm_linux_x86_64//:all",
    ],
)

# buildifier: leave-alone
filegroup(
    name = "compiler_lx64_ma64",
    srcs = [
        ":all_lx64_ma64",
        "//cc_toolchain/wrappers:all",
        "@llvm_linux_x86_64//:clang",
        "@llvm_linux_x86_64//:clang++",
        "@llvm_linux_x86_64//:distro_libs",
    ],
)

# buildifier: leave-alone
filegroup(
    name = "linker_lx64_ma64",
    srcs = [
        ":compiler_lx64_ma64",
        "//cc_toolchain/wrappers:all",
        "@llvm_linux_x86_64//:ld",
        "@sysroot_macos_aarch64//:startup_libs",
        "@llvm_linux_x86_64//:distro_libs",
    ],
)

# buildifier: leave-alone
filegroup(
    name = "ar_lx64_ma64",
    srcs = [
        "//cc_toolchain/wrappers:all",
        "@llvm_linux_x86_64//:ar_darwin",
        "@llvm_linux_x86_64//:distro_libs",
    ],
)

cc_toolchain(
    name = "toolchain_lx64_ma64",
    all_files = ":all_lx64_ma64",
    ar_files = ":ar_lx64_ma64",
    compiler_files = ":compiler_lx64_ma64",
    dwp_files = ":all_lx64_ma64",
    linker_files = ":linker_lx64_ma64",
    objcopy_files = ":empty",
    strip_files = ":empty",
    supports_param_files = 1,
    toolchain_config = ":toolchain_config_lx64_ma64",
    toolchain_identifier = "toolchain_id_lx64_ma64",
)

cc_toolchain_config(
    name = "toolchain_config_lx64_ma64",
    archiver = "@llvm_linux_x86_64//:ar_darwin",
    c_compiler = "@llvm_linux_x86_64//:clang",
    cc_compiler = "@llvm_linux_x86_64//:clang++",
    compiler_features = [
        # Hermetic libraries feature required before import.
        "//third_party/rules_cc_toolchain/features:hermetic_libraries",
        "//cc_toolchain/features:toolchain_import_lx64_ma64",
        "//third_party/rules_cc_toolchain/features:undefined_symbols",

        # Toolchain configuration
        "//third_party/rules_cc_toolchain/features:warnings",
        "//third_party/rules_cc_toolchain/features:errors",
        "//third_party/rules_cc_toolchain/features:reproducible",
        "//third_party/rules_cc_toolchain/features:language",
        "//third_party/rules_cc_toolchain/features:use_lld",
        "//cc_toolchain/features:sysroot_ma64",
        "//cc_toolchain/features:startup_libs_ma64",
        "//third_party/rules_cc_toolchain/features:coverage",
        "//cc_toolchain/features:max_install_names",
        "//cc_toolchain/features:no_elaborated_enum_base",

        # PIC / PIE flags
        "//third_party/rules_cc_toolchain/features:supports_pic",
        "//third_party/rules_cc_toolchain/features:position_independent_code",

        # Optimization flags
        "//cc_toolchain/features:garbage_collect_symbols_mac",
        "//cc_toolchain/features:constants_merge",
        "//cc_toolchain/features:asserts_disable",
        "//third_party/rules_cc_toolchain/features:dbg",
        "//third_party/rules_cc_toolchain/features:opt",
        "//cc_toolchain/features:detect_issues",

        # C++ standard configuration
        "//third_party/rules_cc_toolchain/features:c++11",
        "//third_party/rules_cc_toolchain/features:c++14",
        "//third_party/rules_cc_toolchain/features:c++17",

        #
        "//cc_toolchain/features:allow_shlib_undefined",
        "//cc_toolchain/features:supports_dynamic_linker",
        "//cc_toolchain/features:supports_start_end_lib_feature",
    ],
    dynamic_library_extension = ".dylib",
    install_name = "@llvm_linux_x86_64//:install_name_tool_darwin",
    linker = "@llvm_linux_x86_64//:ld",
    target_cpu = "aarch64",
    target_libc = "macosx",
    target_system_name = "local",
    tool_paths = MAC_TOOLS,
)

# buildifier: leave-alone
toolchain(
    name = "lx64_ma64",
    exec_compatible_with = [
        "@platforms//cpu:x86_64",
        "@platforms//os:linux",
    ],
    target_compatible_with = [
        "@platforms//cpu:aarch64",
        "@platforms//os:macos",
    ],
    target_settings = [
        "@local_config_cuda//:is_cuda_disabled",
        "//cc_toolchain/config:is_hermetic_cc_enabled",
    ],
    toolchain = ":toolchain_lx64_ma64",
    toolchain_type = "@bazel_tools//tools/cpp:toolchain_type",
)

######################################################################
# Tools: macOS aarch64, Sysroot: macOS aarch64
######################################################################

# buildifier: leave-alone
cc_toolchain_import(
    name = "imports_ma64_ma64",
    deps = [
        "@sysroot_macos_aarch64//:includes_c",
        "@llvm_macos_aarch64//:includes",
        "@sysroot_macos_aarch64//:includes_system",
        "@sysroot_macos_aarch64//:glibc",
        "@sysroot_macos_aarch64//:pthread",
    ],
    visibility = ["//visibility:public"],
)

# buildifier: leave-alone
filegroup(
    name = "all_ma64_ma64",
    srcs = [
        ":imports_ma64_ma64",
        "//cc_toolchain/wrappers:all",
        "//cc_toolchain/features:startup_libs_ma64",
        "@llvm_macos_aarch64//:all",
    ],
)

# buildifier: leave-alone
filegroup(
    name = "compiler_ma64_ma64",
    srcs = [
        ":all_ma64_ma64",
        "//cc_toolchain/wrappers:all",
        "@llvm_macos_aarch64//:clang",
        "@llvm_macos_aarch64//:clang++",
    ],
)

# buildifier: leave-alone
filegroup(
    name = "linker_ma64_ma64",
    srcs = [
        ":compiler_ma64_ma64",
        "//cc_toolchain/wrappers:all",
        "@llvm_macos_aarch64//:ld",
        "@sysroot_macos_aarch64//:startup_libs",
    ],
)

# buildifier: leave-alone
filegroup(
    name = "ar_ma64_ma64",
    srcs = [
        "//cc_toolchain/wrappers:all",
        "@llvm_macos_aarch64//:ar",
    ],
)

cc_toolchain(
    name = "toolchain_ma64_ma64",
    all_files = ":all_ma64_ma64",
    ar_files = ":ar_ma64_ma64",
    compiler_files = ":compiler_ma64_ma64",
    dwp_files = ":all_ma64_ma64",
    linker_files = ":linker_ma64_ma64",
    objcopy_files = ":empty",
    strip_files = ":empty",
    supports_param_files = 1,
    toolchain_config = ":toolchain_config_ma64_ma64",
    toolchain_identifier = "toolchain_id_ma64_ma64",
)

cc_toolchain_config(
    name = "toolchain_config_ma64_ma64",
    archiver = "@llvm_macos_aarch64//:ar",
    c_compiler = "@llvm_macos_aarch64//:clang",
    cc_compiler = "@llvm_macos_aarch64//:clang++",
    compiler_features = [
        # Hermetic libraries feature required before import.
        "//third_party/rules_cc_toolchain/features:hermetic_libraries",
        "//cc_toolchain/features:toolchain_import_ma64_ma64",
        "//third_party/rules_cc_toolchain/features:undefined_symbols",

        # Toolchain configuration
        "//third_party/rules_cc_toolchain/features:warnings",
        "//third_party/rules_cc_toolchain/features:errors",
        "//third_party/rules_cc_toolchain/features:reproducible",
        "//third_party/rules_cc_toolchain/features:language",
        "//third_party/rules_cc_toolchain/features:use_lld",
        "//cc_toolchain/features:sysroot_ma64",
        "//cc_toolchain/features:startup_libs_ma64",
        "//third_party/rules_cc_toolchain/features:coverage",
        "//cc_toolchain/features:max_install_names",
        "//cc_toolchain/features:no_elaborated_enum_base",

        # PIC / PIE flags
        "//third_party/rules_cc_toolchain/features:supports_pic",
        "//third_party/rules_cc_toolchain/features:position_independent_code",

        # Optimization flags
        "//cc_toolchain/features:garbage_collect_symbols_mac",
        "//cc_toolchain/features:constants_merge",
        "//cc_toolchain/features:asserts_disable",
        "//third_party/rules_cc_toolchain/features:dbg",
        "//third_party/rules_cc_toolchain/features:opt",
        "//cc_toolchain/features:detect_issues",

        # C++ standard configuration
        "//third_party/rules_cc_toolchain/features:c++11",
        "//third_party/rules_cc_toolchain/features:c++14",
        "//third_party/rules_cc_toolchain/features:c++17",

        #
        "//cc_toolchain/features:allow_shlib_undefined",
        "//cc_toolchain/features:supports_dynamic_linker",
        "//cc_toolchain/features:supports_start_end_lib_feature",
    ],
    dynamic_library_extension = ".dylib",
    install_name = "@llvm_macos_aarch64//:install_name_tool_darwin",
    linker = "@llvm_macos_aarch64//:ld",
    target_cpu = "aarch64",
    target_libc = "macosx",
    target_system_name = "local",
    tool_paths = MAC_TOOLS,
)

# buildifier: leave-alone
toolchain(
    name = "ma64_ma64",
    exec_compatible_with = [
        "@platforms//cpu:aarch64",
        "@platforms//os:macos",
    ],
    target_compatible_with = [
        "@platforms//cpu:aarch64",
        "@platforms//os:macos",
    ],
    target_settings = [
        "@local_config_cuda//:is_cuda_disabled",
        "//cc_toolchain/config:is_hermetic_cc_enabled",
    ],
    toolchain = ":toolchain_ma64_ma64",
    toolchain_type = "@bazel_tools//tools/cpp:toolchain_type",
)
